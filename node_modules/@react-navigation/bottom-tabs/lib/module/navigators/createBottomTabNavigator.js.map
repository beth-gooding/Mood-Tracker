{"version":3,"sources":["createBottomTabNavigator.tsx"],"names":["React","warnOnce","useNavigationBuilder","createNavigatorFactory","TabRouter","BottomTabView","BottomTabNavigator","initialRouteName","backBehavior","children","screenOptions","sceneContainerStyle","lazy","tabBarOptions","rest","defaultScreenOptions","Object","assign","tabBarHideOnKeyboard","keyboardHidesTabBar","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarActiveBackgroundColor","activeBackgroundColor","tabBarInactiveBackgroundColor","inactiveBackgroundColor","tabBarAllowFontScaling","allowFontScaling","tabBarShowLabel","showLabel","tabBarLabelStyle","labelStyle","tabBarIconStyle","iconStyle","tabBarItemStyle","tabStyle","tabBarLabelPosition","labelPosition","tabBarAdaptive","adaptive","JSON","stringify","state","descriptors","navigation","NavigationContent"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACEC,oBADF,EAEEC,sBAFF,EAIEC,SAJF,QASO,0BATP;AAUA,OAAOC,aAAP,MAA0B,wBAA1B;;AAWA,SAASC,kBAAT,CAA4B;AAC1BC,EAAAA,gBAD0B;AAE1BC,EAAAA,YAF0B;AAG1BC,EAAAA,QAH0B;AAI1BC,EAAAA,aAJ0B;AAK1BC,EAAAA,mBAL0B;AAM1B;AACAC,EAAAA,IAP0B;AAQ1B;AACAC,EAAAA,aAT0B;AAU1B,KAAGC;AAVuB,CAA5B,EAWU;AACR,MAAIC,oBAAgD,GAAG,EAAvD;;AAEA,MAAIF,aAAJ,EAAmB;AACjBG,IAAAA,MAAM,CAACC,MAAP,CAAcF,oBAAd,EAAoC;AAClCG,MAAAA,oBAAoB,EAAEL,aAAa,CAACM,mBADF;AAElCC,MAAAA,qBAAqB,EAAEP,aAAa,CAACQ,eAFH;AAGlCC,MAAAA,uBAAuB,EAAET,aAAa,CAACU,iBAHL;AAIlCC,MAAAA,2BAA2B,EAAEX,aAAa,CAACY,qBAJT;AAKlCC,MAAAA,6BAA6B,EAAEb,aAAa,CAACc,uBALX;AAMlCC,MAAAA,sBAAsB,EAAEf,aAAa,CAACgB,gBANJ;AAOlCC,MAAAA,eAAe,EAAEjB,aAAa,CAACkB,SAPG;AAQlCC,MAAAA,gBAAgB,EAAEnB,aAAa,CAACoB,UARE;AASlCC,MAAAA,eAAe,EAAErB,aAAa,CAACsB,SATG;AAUlCC,MAAAA,eAAe,EAAEvB,aAAa,CAACwB,QAVG;AAWlCC,MAAAA,mBAAmB,EAAEzB,aAAa,CAAC0B,aAXD;AAYlCC,MAAAA,cAAc,EAAE3B,aAAa,CAAC4B;AAZI,KAApC;AAeAxC,IAAAA,QAAQ,CACNY,aADM,EAEL,4LAA2L6B,IAAI,CAACC,SAAL,CAC1L5B,oBAD0L,EAE1L,IAF0L,EAG1L,CAH0L,CAI1L,6FANI,CAAR;AAQD;;AAED,MAAI,OAAOH,IAAP,KAAgB,SAApB,EAA+B;AAC7BG,IAAAA,oBAAoB,CAACH,IAArB,GAA4BA,IAA5B;AAEAX,IAAAA,QAAQ,CACN,IADM,EAEL,0FAFK,CAAR;AAID;;AAED,QAAM;AACJ2C,IAAAA,KADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA;AAJI,MAKF7C,oBAAoB,CAMtBE,SANsB,EAMX;AACXG,IAAAA,gBADW;AAEXC,IAAAA,YAFW;AAGXC,IAAAA,QAHW;AAIXC,IAAAA,aAJW;AAKXK,IAAAA;AALW,GANW,CALxB;AAmBA,sBACE,oBAAC,iBAAD,qBACE,oBAAC,aAAD,eACMD,IADN;AAEE,IAAA,KAAK,EAAE8B,KAFT;AAGE,IAAA,UAAU,EAAEE,UAHd;AAIE,IAAA,WAAW,EAAED,WAJf;AAKE,IAAA,mBAAmB,EAAElC;AALvB,KADF,CADF;AAWD;;AAED,eAAeR,sBAAsB,CAKnCG,kBALmC,CAArC","sourcesContent":["import * as React from 'react';\nimport warnOnce from 'warn-once';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  TabRouter,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n  ParamListBase,\n} from '@react-navigation/native';\nimport BottomTabView from '../views/BottomTabView';\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<BottomTabNavigationOptions> &\n  TabRouterOptions &\n  BottomTabNavigationConfig;\n\nfunction BottomTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenOptions,\n  sceneContainerStyle,\n  // @ts-expect-error: lazy is deprecated\n  lazy,\n  // @ts-expect-error: tabBarOptions is deprecated\n  tabBarOptions,\n  ...rest\n}: Props) {\n  let defaultScreenOptions: BottomTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition: tabBarOptions.labelPosition,\n      tabBarAdaptive: tabBarOptions.adaptive,\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/6.x/bottom-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.`\n    );\n  }\n\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent,\n  } = useNavigationBuilder<\n    TabNavigationState<ParamListBase>,\n    TabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    BottomTabNavigationOptions,\n    BottomTabNavigationEventMap\n  >(TabRouter, {\n    initialRouteName,\n    backBehavior,\n    children,\n    screenOptions,\n    defaultScreenOptions,\n  });\n\n  return (\n    <NavigationContent>\n      <BottomTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n        sceneContainerStyle={sceneContainerStyle}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n  typeof BottomTabNavigator\n>(BottomTabNavigator);\n"]}