{"version":3,"sources":["NavigationContainer.tsx"],"names":["React","BaseNavigationContainer","ThemeProvider","DefaultTheme","LinkingContext","useThenable","useLinking","useDocumentTitle","useBackButton","NavigationContainerInner","theme","linking","fallback","documentTitle","onReady","rest","ref","isLinkingEnabled","enabled","refContainer","useRef","getInitialState","prefixes","isResolved","initialState","useImperativeHandle","current","linkingContext","useMemo","options","isReady","onReadyRef","useEffect","NavigationContainer","forwardRef"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,uBADF,QAKO,wBALP;AAMA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAT,CACE;AACEC,EAAAA,KAAK,GAAGP,YADV;AAEEQ,EAAAA,OAFF;AAGEC,EAAAA,QAAQ,GAAG,IAHb;AAIEC,EAAAA,aAJF;AAKEC,EAAAA,OALF;AAME,KAAGC;AANL,CADF,EASEC,GATF,EAUE;AACA,QAAMC,gBAAgB,GAAGN,OAAO,GAAGA,OAAO,CAACO,OAAR,KAAoB,KAAvB,GAA+B,KAA/D;AAEA,QAAMC,YAAY,GAAGnB,KAAK,CAACoB,MAAN,CACnB,IADmB,CAArB;AAIAZ,EAAAA,aAAa,CAACW,YAAD,CAAb;AACAZ,EAAAA,gBAAgB,CAACY,YAAD,EAAeN,aAAf,CAAhB;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAsBf,UAAU,CAACa,YAAD,EAAe;AACnDD,IAAAA,OAAO,EAAED,gBAD0C;AAEnDK,IAAAA,QAAQ,EAAE,EAFyC;AAGnD,OAAGX;AAHgD,GAAf,CAAtC;AAMA,QAAM,CAACY,UAAD,EAAaC,YAAb,IAA6BnB,WAAW,CAACgB,eAAD,CAA9C;AAEArB,EAAAA,KAAK,CAACyB,mBAAN,CAA0BT,GAA1B,EAA+B,MAAMG,YAAY,CAACO,OAAlD;AAEA,QAAMC,cAAc,GAAG3B,KAAK,CAAC4B,OAAN,CAAc,OAAO;AAAEC,IAAAA,OAAO,EAAElB;AAAX,GAAP,CAAd,EAA4C,CAACA,OAAD,CAA5C,CAAvB;AAEA,QAAMmB,OAAO,GAAGf,IAAI,CAACS,YAAL,IAAqB,IAArB,IAA6B,CAACP,gBAA9B,IAAkDM,UAAlE;AAEA,QAAMQ,UAAU,GAAG/B,KAAK,CAACoB,MAAN,CAAaN,OAAb,CAAnB;AAEAd,EAAAA,KAAK,CAACgC,SAAN,CAAgB,MAAM;AACpBD,IAAAA,UAAU,CAACL,OAAX,GAAqBZ,OAArB;AACD,GAFD;AAIAd,EAAAA,KAAK,CAACgC,SAAN,CAAgB,MAAM;AACpB,QAAIF,OAAJ,EAAa;AAAA;;AACX,6BAAAC,UAAU,CAACL,OAAX,iFAAAK,UAAU;AACX;AACF,GAJD,EAIG,CAACD,OAAD,CAJH;;AAMA,MAAI,CAACA,OAAL,EAAc;AACZ;AACA;AACA,WAAOlB,QAAP;AACD;;AAED,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEe;AAAhC,kBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEjB;AAAtB,kBACE,oBAAC,uBAAD,eACMK,IADN;AAEE,IAAA,YAAY,EACVA,IAAI,CAACS,YAAL,IAAqB,IAArB,GAA4BA,YAA5B,GAA2CT,IAAI,CAACS,YAHpD;AAKE,IAAA,GAAG,EAAEL;AALP,KADF,CADF,CADF;AAaD;;AAED,MAAMc,mBAAmB,gBAAGjC,KAAK,CAACkC,UAAN,CAAiBzB,wBAAjB,CAA5B;AAQA,eAAewB,mBAAf","sourcesContent":["import * as React from 'react';\nimport {\n  BaseNavigationContainer,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport LinkingContext from './LinkingContext';\nimport useThenable from './useThenable';\nimport useLinking from './useLinking';\nimport useDocumentTitle from './useDocumentTitle';\nimport useBackButton from './useBackButton';\nimport type { Theme, LinkingOptions, DocumentTitleOptions } from './types';\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  const refContainer = React.useRef<NavigationContainerRef<ParamListBase>>(\n    null\n  );\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n"]}